1. Συνδεθείτε στην MySQL του συστήματός σας με όποιον από τους προαναφερόμενους
τρόπους επιθυμείτε.

    ~  sudo systemctl start mariadb                                          ✔ 
[sudo] password for filipposp: 
    ~  sudo mysql    

 2. Ελέγξτε αν υπάρχει ΒΔ με την ονομασία my_accounts.

 MariaDB [personel]> DROP DATABASE IF EXISTS  my_accounts;
 Query OK, 0 rows affected, 1 warning (0,003 sec)

 3. Δημιουργήστε τη ΒΔ my_accounts, επιλέξτε την για χρήση και δημιουργήστε και πίνακα με
 όνομα Accounts με δομή και περιεχόμενα, όπως φαίνονται στις ακόλουθες εντολές. Δείξτε
 το αποτέλεσμα εμφανίζοντας (α) τη λίστα πινάκων της ΒΔ, (β) τα περιεχόμενα και (γ) τη δομή
 του πίνακα Accounts.

 MariaDB [personel]> create database my_accounts;
 Query OK, 1 row affected (0,000 sec)
 
 MariaDB [personel]> create table Accounts (acctID integer not null primary key,
     -> Balance integer not null);
 Query OK, 0 rows affected (0,032 sec)
 
 MariaDB [personel]> insert into Accounts (acctID, Balance) values (101, 1000);
 Query OK, 1 row affected (0,006 sec)
 
 MariaDB [personel]> insert into Accounts (acctID, Balance) values (202, 2000);
 Query OK, 1 row affected (0,001 sec)
 
 MariaDB [personel]> insert into Accounts (acctID, Balance) values (303, 2500);
 Query OK, 1 row affected (0,002 sec)
 
 MariaDB [personel]> insert into Accounts (acctID, Balance) values (404, 3000);

 4. Εμφανίστε τα περιεχόμενα του πίνακα Accounts, προσθέτοντας αύξουσα αρίθμηση στις
 εγγραφές του:

 MariaDB [personel]> select (@rownum:=@rownum+1) as NO, acctID , Balance from Accounts order by acctID;
 +------+--------+---------+
 | NO   | acctID | Balance |
 +------+--------+---------+
 |    1 |    101 |    1000 |
 |    2 |    202 |    2000 |
 |    3 |    303 |    2500 |
 |    4 |    404 |    3000 |
 +------+--------+---------+
 4 rows in set (0,001 sec)
 
 5. Η αύξουσα αρίθμηση που εμφανίστηκε στην στήλη με τίτλο No του βήματος 4, θα πρέπει να
 υπάρχει και στον πίνακα Accounts; Αιτιολογήστε την απάντησή σας.

Δεν θα έπρεπε να ύπαρχουν στο πίνακα accounts. Δίοτι είναι καλύτερο να δημιούργουνται 
κατα την στιγμή εκτέλεσης γίατι ποιανει περίττο χώρο μνήμης και επίσης ο πίνακας θα 
πρέπει να περίεχει μόνο τα θεμελίωδη δεδομένα ποy απαιτούνται για την εφάρμογη.

 
6. Προσθέστε τον πίνακα CUSTOMERS που εμφανίζεται στην Εικόνα 1. Ορίστε τύπους
δεδομένων των στηλών CUSTNO και CUST_NAME ως integer και varchar(30) αντίστοιχα.
Δείξτε το αποτέλεσμα εμφανίζοντας (α) τη λίστα πινάκων της ΒΔ, (β) τα περιεχόμενα και (γ)
τη δομή του πίνακα CUSTOMERS.

MariaDB [personel]> 
MariaDB [personel]> CREATE TABLE CUSTOMERS(
    -> CUSTNO INT,
    -> CUST_NAME VARCHAR(30)
    -> );
Query OK, 0 rows affected (0,015 sec)

MariaDB [personel]> SHOW TABLES;
+--------------------+
| Tables_in_personel |
+--------------------+
| Accounts           |
| CUSTOMERS          |
| DEPT               |
| EMP                |
| EMP_DISTINCT_NAMES |
| EMP_SALES          |
| EMP_VIEW           |
| EPM_ON_SALES       |
| GROUP_EMP          |
| job                |
| new_EMP_DEPT_VIEW  |
+--------------------+
11 rows in set (0,000 sec)

MariaDB [personel]> INSERT INTO CUSTOMERS (CUSTNO,CUST_NAME) VALUES (10,'101');
Query OK, 1 row affected (0,003 sec)

MariaDB [personel]> INSERT INTO CUSTOMERS (CUSTNO,CUST_NAME) VALUES (20,'202');
Query OK, 1 row affected (0,002 sec)


MariaDB [personel]> SELECT * FROM CUSTOMERS
    -> ;
Empty set (0,004 sec)

MariaDB [personel]> DESCRIBE CUSTOMERS;
+-----------+-------------+------+-----+---------+-------+
| Field     | Type        | Null | Key | Default | Extra |
+-----------+-------------+------+-----+---------+-------+
| CUSTNO    | int(11)     | YES  |     | NULL    |       |
| CUST_NAME | varchar(30) | YES  |     | NULL    |       |
+-----------+-------------+------+-----+---------+-------+
2 rows in set (0,001 sec)

7. Στον πίνακα Accounts προσθέστε στήλη με όνομα Custno, τύπο δεδομένων integer και ορίστε
την ως FK του πίνακα Accounts για τη σύνδεση των εγγραφών του με τις εγγραφές του πίνακα
CUSTOMERS. Ενημερώστε τα περιεχόμενα της στήλης Custno, ώστε ο λογαριασμός με
AcctID=202 να αντιστοιχεί στον κωδικό πελάτη 20 και όλοι οι υπόλοιποι λογαριασμοί να
αντιστοιχούν στον κωδικό πελάτη 10. Δείξτε το αποτέλεσμα εμφανίζοντας (α) τα
περιεχόμενα και (β) τη δομή του πίνακα Accounts.

MariaDB [personel]> ALTER TABLE Accounts ADD Custno INT;
Query OK, 0 rows affected (0,030 sec)
Records: 0  Duplicates: 0  Warnings: 0

MariaDB [personel]> UPDATE Accounts set Custno = 20 WHERE acctID = 202;
Query OK, 1 row affected (0,003 sec)
Rows matched: 1  Changed: 1  Warnings: 0

MariaDB [personel]> UPDATE Accounts set Custno = 10 WHERE acctID != 202;
Query OK, 3 rows affected (0,004 sec)
Rows matched: 3  Changed: 3  Warnings: 0


MariaDB [personel]> SELECT * FROM Accounts;
+--------+---------+--------+
| acctID | Balance | Custno |
+--------+---------+--------+
|    101 |    1000 |     10 |
|    202 |    2000 |     20 |
|    303 |    2500 |     10 |
|    404 |    3000 |     10 |
+--------+---------+--------+
4 rows in set (0,000 sec)

MariaDB [personel]> DESCRIBE Accounts;
+---------+---------+------+-----+---------+-------+
| Field   | Type    | Null | Key | Default | Extra |
+---------+---------+------+-----+---------+-------+
| acctID  | int(11) | NO   | PRI | NULL    |       |
| Balance | int(11) | NO   |     | NULL    |       |
| Custno  | int(11) | YES  | MUL | NULL    |       |
+---------+---------+------+-----+---------+-------+
3 rows in set (0,001 sec)

8.Εκτελέστε και ερμηνεύστε τις ακόλουθες δηλώσεις SQL:

MariaDB [personel]> SELECT CUSTNO, COUNT(*), SUM(Balance)
    -> FROM Accounts
    -> WHERE CUSTNO NOT IN (20)
    -> GROUP BY CUSTNO;
+--------+----------+--------------+
| CUSTNO | COUNT(*) | SUM(Balance) |
+--------+----------+--------------+
|     10 |        3 |         6500 |
+--------+----------+--------------+

MariaDB [personel]> SELECT CUSTNO, COUNT(*), SUM(Balance)
    -> FROM Accounts
    -> WHERE CUSTNO NOT IN (@CUST_NO)
    -> GROUP BY CUSTNO;
+--------+----------+--------------+
| CUSTNO | COUNT(*) | SUM(Balance) |
+--------+----------+--------------+
|     10 |        3 |         6500 |
+--------+----------+--------------+
1 row in set (0,000 sec)

Και τα δύο ερωτήματα εκτελούν ουσιαστικά την ίδια λειτουργία:
υπολογίζουν τον αριθμό των λογαριασμών και το συνολικό υπόλοιπο για κάθε
πελάτη, εξαιρουμένου του πελάτη με αριθμό 20. 
Το δεύτερο ερώτημα παρέχει μεγαλύτερη ευελιξία χρησιμοποιώντας μια μεταβλητή 
για τον αριθμό του πελάτη. Αυτή η προσέγγιση είναι χρήσιμη 
εάν πρέπει να εκτελέσoυμε το ερώτημα πολλές φορές για διαφορετικούς 
αριθμούς πελατών χωρίς να ξαναγράφουμε ολόκληρο το ερώτημα κάθε φορά.

9. Εκτελέστε και ερμηνεύστε τις ακόλουθες δηλώσεις SQL:
MariaDB [personel]> select count(*), sum(Balance) from Accounts;
+----------+--------------+
| count(*) | sum(Balance) |
+----------+--------------+
|        4 |         8500 |
+----------+--------------+
1 row in set (0,000 sec)

MariaDB [personel]> select count(*), sum(Balance), avg(Balance)
    -> into @COUNT_acctID, @SUM_acctID, @AVG_acctID
    -> from Accounts;
Query OK, 1 row affected (0,000 sec)

MariaDB [personel]> select @COUNT_acctID, @SUM_acctID, @AVG_acctID, @MY_AVG := @SUM_acctID/@COUNT_acctID;
+---------------+-------------+----------------+--------------------------------------+
| @COUNT_acctID | @SUM_acctID | @AVG_acctID    | @MY_AVG := @SUM_acctID/@COUNT_acctID |
+---------------+-------------+----------------+--------------------------------------+
|             4 |        8500 | 2125.000000000 |                       2125.000000000 |
+---------------+-------------+----------------+--------------------------------------+
1 row in set (0,000 sec)

10. Ορίστε και χρησιμοποιήστε τη συνάρτηση factorial που υπολογίζει το n!=1*2*…*n:
Database changed
MariaDB [personel]> select factorial(4);
+--------------+
| factorial(4) |
+--------------+
|           24 |
+--------------+
1 row in set (0,002 sec)

MariaDB [personel]> select factorial(15);
ERROR 1264 (22003): Out of range value for column 'F' at row 0
MariaDB [personel]> select factorial(10);
+---------------+
| factorial(10) |
+---------------+
|       3628800 |
+---------------+
1 row in set (0,001 sec)


11. Ορίστε και χρησιμοποιήστε την διαδικασία my_procedure_Local_Variables για
υπολογισμούς με χρήση τοπικών μεταβλητών:

MariaDB [personel]> DELIMITER $$
MariaDB [personel]> CREATE PROCEDURE my_procedure_Local_Variables()
    -> BEGIN
    ->     SET @X = 25;
    ->     SET @Y = 10;
    ->     SELECT @X, @Y, @X*@Y;
    -> END $$
Query OK, 0 rows affected (0,005 sec)

MariaDB [personel]> CALL my_procedure_Local_Variables();
+------+------+-------+
| @X   | @Y   | @X*@Y |
+------+------+-------+
|   25 |   10 |   250 |
+------+------+-------+
1 row in set (0,000 sec)

Query OK, 0 rows affected (0,001 sec)

12. Ακολουθήστε τα ακόλουθα για τη δημιουργία μιας αποθηκευμένης διαδικασίας και χρήση
των commit/rollback. Εξηγείστε τι κάνει η διαδικασία myProc.

MariaDB [personel]> SELECT MOD(@p_no,2);SET @p_no=3;
+--------------+
| MOD(@p_no,2) |
+--------------+
|            0 |
+--------------+
1 row in set (0,000 sec)

Query OK, 0 rows affected (0,000 sec)

MariaDB [personel]> SELECT MOD(@p_no,2);
+--------------+
| MOD(@p_no,2) |
+--------------+
|            1 |
+--------------+
1 row in set (0,000 sec)

MariaDB [personel]> DROP TABLE IF EXISTS myTrace;
Query OK, 0 rows affected, 1 warning (0,006 sec)

MariaDB [personel]> CREATE TABLE myTrace ( t_no INT,
    -> t_user CHAR(20),
    -> t_date DATE,
    -> t_time TIME,
    -> t_proc VARCHAR(16), t_what VARCHAR(30)); 
Query OK, 0 rows affected (0,011 sec)

MariaDB [personel]> DELIMITER !
MariaDB [personel]> CREATE PROCEDURE myProc (IN p_no INT, IN p_in VARCHAR(30),
    ->  OUT p_out VARCHAR(30))
    -> LANGUAGE SQL
    -> BEGIN
    -> SET p_out=p_in;
    -> INSERT INTO myTrace (t_no, t_user, t_date, t_time, t_proc, t_what)
    ->  VALUES (p_no, current_user, current_date, current_time, 'myProc', p_in);
    -> IF (MOD(p_no,2)=0) THEN
    ->  COMMIT;
    -> ELSE ROLLBACK;
    -> END IF;
    -> END !
Query OK, 0 rows affected (0,005 sec)

MariaDB [personel]> DELIMITER ;
MariaDB [personel]> SET AUTOCOMMIT=0;
Query OK, 0 rows affected (0,000 sec)

MariaDB [personel]> CALL myProc(1, 'hello1', @out);
Query OK, 1 row affected (0,001 sec)

MariaDB [personel]> CALL myProc(2, 'hello2', @out);
Query OK, 1 row affected (0,003 sec)

MariaDB [personel]> CALL myProc(3, 'hello3', @out);
Query OK, 1 row affected (0,000 sec)

MariaDB [personel]> CALL myProc(4, 'hello4', @out);
Query OK, 1 row affected (0,001 sec)

MariaDB [personel]> CALL myProc(5, 'hello5', @out);
Query OK, 1 row affected (0,000 sec)

MariaDB [personel]> CALL myProc(6, 'hello6', @out);
Query OK, 1 row affected (0,001 sec)

MariaDB [personel]> CALL myProc(7, 'hello7', @out);
Query OK, 1 row affected (0,000 sec)

MariaDB [personel]> SELECT * FROM myTrace;
+------+----------------+------------+----------+--------+--------+
| t_no | t_user         | t_date     | t_time   | t_proc | t_what |
+------+----------------+------------+----------+--------+--------+
|    2 | root@localhost | 2024-01-23 | 16:06:09 | myProc | hello2 |
|    4 | root@localhost | 2024-01-23 | 16:06:09 | myProc | hello4 |
|    6 | root@localhost | 2024-01-23 | 16:06:09 | myProc | hello6 |
+------+----------------+------------+----------+--------+--------+
3 rows in set (0,000 sec)

Η διαδικασία myProc εισάγει μια εγγραφή καταγραγής στον πίνακα myTrace κάθε
φόρα που καλείται.Η επαναφορά στο τέλος της διαδικασίας εξαρτάται από τον αριθμό εισόδου είναι ζυγός
ή περίττος.Επίσης η χρήση των commit  και rollback  χρησιμοποίπυνται
σε διαδικασίες που τροποποιούν δεδομένα , οπού θέλουμε να διασφαλίσουμε ότι όλες
οι αλλάγες εφαρμόζονται πλήρως είτε αναρούνται πλήρως και η rollback θα αναίρεσει όλες 
τις αλαγές που γίναν μέσα στην διαδικασία που την έχουμε ορίσει.

13. Στον πίνακα Accounts (Εικόνα 1) η μεταφορά χρημάτων από ένα λογαριασμό σε έναν άλλο
θα μπορούσε να υλοποιηθεί με δύο δηλώσεις UPDATE. Ακολουθεί παράδειγμα επίλυσης με
χρήση συναλλαγής (transaction). Η συναλλαγή αυτή χαρακτηρίζεται ως αναξιόπιστη, καθώς
δεν γίνεται έλεγχος σχετικά: (α) με την ύπαρξη του λογαριασμού στον οποίο μεταφέρονται
τα χρήματα και (β) την επάρκεια του λογαριασμού από τον οποίο μεταφέρονται τα χρήματα.

MariaDB [personel]> SELECT * FROM accounts;
ERROR 1146 (42S02): Table 'personel.accounts' doesn't exist
MariaDB [personel]> SELECT * FROM Αccounts;
ERROR 1146 (42S02): Table 'personel.Αccounts' doesn't exist
MariaDB [personel]> DROP TABLE IF EXISTS Accounts;
Query OK, 0 rows affected (0,008 sec)

MariaDB [personel]> CREATE TABLE Accounts ( acctID INTEGER NOT NULL PRIMARY KEY,
    ->  balance INTEGER NOT NULL,
    -> CONSTRAINT unloanable_account CHECK (balance >= 0));
Query OK, 0 rows affected (0,009 sec)

MariaDB [personel]> INSERT INTO Accounts (acctID, balance) VALUES (101, 1000);
Query OK, 1 row affected (0,000 sec)

MariaDB [personel]> INSERT INTO Accounts (acctID, balance) VALUES (202, 2000); 
Query OK, 1 row affected (0,000 sec)

MariaDB [personel]> COMMIT;
Query OK, 0 rows affected (0,019 sec)

MariaDB [personel]> SELECT * from Accounts;
+--------+---------+
| acctID | balance |
+--------+---------+
|    101 |    1000 |
|    202 |    2000 |
+--------+---------+
2 rows in set (0,000 sec)


MariaDB [personel]> BEGIN TRANSACTION;
ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near 'TRANSACTION' at line 1
MariaDB [personel]> UPDATE Accounts SET balance = balance - 100
    -> WHERE acctId = 101;
Query OK, 1 row affected (0,000 sec)
Rows matched: 1  Changed: 1  Warnings: 0

MariaDB [personel]> UPDATE Accounts SET balance = balance + 100
    -> WHERE acctId = 202;
Query OK, 1 row affected (0,000 sec)
Rows matched: 1  Changed: 1  Warnings: 0

MariaDB [personel]> COMMIT;
Query OK, 0 rows affected (0,002 sec)

MariaDB [personel]> select * from Accounts;
+--------+---------+
| acctID | balance |
+--------+---------+
|    101 |     900 |
|    202 |    2100 |
+--------+---------+
2 rows in set (0,000 sec)

14. Ακολουθεί λύση του προβλήματος στο βήμα 15 με χρήση της procedure BankTransfer:

MariaDB [personel]> CREATE PROCEDURE BankTransfer (
    ->     IN fromAcct INT,
    ->     IN toAcct INT,
    ->     IN amount INT,
    ->     OUT msg VARCHAR(100)
    -> )
    -> P1: BEGIN
    ->     DECLARE rowCount INT;
    ->     DECLARE newBalance INT;
    -> 
    ->     SELECT COUNT(*) INTO rowCount FROM Accounts WHERE acctID = fromAcct;
    ->     IF rowCount = 0 THEN
    ->         SET msg = CONCAT('rolled back because of missing account ', fromAcct);
    ->         LEAVE P1;
    ->     END IF;
    -> 
    ->     UPDATE Accounts SET balance = balance - amount WHERE acctID = fromAcct;
    ->     SELECT balance INTO newBalance FROM Accounts WHERE acctID = fromAcct;
    -> 
    ->     IF newBalance < 0 THEN
    ->         SET msg = CONCAT('rolled back because of negative balance of account ', fromAcct);
    ->         LEAVE P1;
    ->     END IF;
    -> 
    ->     SELECT COUNT(*) INTO rowCount FROM Accounts WHERE acctID = toAcct;
    ->     IF rowCount = 0 THEN
    ->         SET msg = CONCAT('rolled back because of missing account ', toAcct);
    ->         LEAVE P1;
    ->     END IF;
    -> 
    ->     UPDATE Accounts SET balance = balance + amount WHERE acctID = toAcct;
    ->     COMMIT;
    ->     SET msg = 'committed';
    -> END P1 //
Query OK, 0 rows affected (0,005 sec)


MariaDB [personel]> SET AUTOCOMMIT=0;
Query OK, 0 rows affected (0,000 sec)

MariaDB [personel]> SET @out = ' ';
Query OK, 0 rows affected (0,000 sec)

MariaDB [personel]> CALL BankTransfer (101, 202, 100, @out);
Query OK, 5 rows affected (0,005 sec)

MariaDB [personel]> SELECT @OUT;
+-----------+
| @OUT      |
+-----------+
| committed |
+-----------+
1 row in set (0,000 sec)

MariaDB [personel]> Select * from accounts;
ERROR 1146 (42S02): Table 'personel.accounts' doesn't exist
MariaDB [personel]> SELECT * FROM Accounts;
+--------+---------+
| acctID | balance |
+--------+---------+
|    101 |     800 |
|    202 |    2200 |
+--------+---------+
2 rows in set (0,000 sec)

MariaDB [personel]> COMMIT;
Query OK, 0 rows affected (0,000 sec)

MariaDB [personel]> COMMIT;
Query OK, 0 rows affected (0,000 sec)

MariaDB [personel]> SET autocommit=0;
Query OK, 0 rows affected (0,000 sec)

MariaDB [personel]> SET @out = ' ';
Query OK, 0 rows affected (0,000 sec)

MariaDB [personel]> CALL BankTransfer (100, 201, 100, @out);
Query OK, 1 row affected (0,000 sec)

MariaDB [personel]> SELECT @OUT;
+--------------------------------------------+
| @OUT                                       |
+--------------------------------------------+
| rolled back because of missing account 100 |
+--------------------------------------------+
1 row in set (0,000 sec)

MariaDB [personel]> Select * from accounts;
ERROR 1146 (42S02): Table 'personel.accounts' doesn't exist
MariaDB [personel]> COMMIT;
Query OK, 0 rows affected (0,000 sec)

MariaDB [personel]> SELECT * FROM Accounts;
+--------+---------+
| acctID | balance |
+--------+---------+
|    101 |     800 |
|    202 |    2200 |
+--------+---------+
2 rows in set (0,000 sec)


MariaDB [personel]> SET autocommit=0;
Query OK, 0 rows affected (0,000 sec)

MariaDB [personel]> SET @out = ' ';
Query OK, 0 rows affected (0,000 sec)

MariaDB [personel]> CALL BankTransfer (100, 201, 100, @out);
Query OK, 1 row affected (0,000 sec)

MariaDB [personel]> SELECT @OUT;
+--------------------------------------------+
| @OUT                                       |
+--------------------------------------------+
| rolled back because of missing account 100 |
+--------------------------------------------+
1 row in set (0,000 sec)

MariaDB [personel]> SET AUTOCOMMIT=0;
Query OK, 0 rows affected (0,000 sec)

MariaDB [personel]> SET @out = ' ';
Query OK, 0 rows affected (0,000 sec)

MariaDB [personel]> CALL BankTransfer (101, 201, 1500, @out);
ERROR 4025 (23000): CONSTRAINT `unloanable_account` failed for `personel`.`Accounts`
MariaDB [personel]> SELECT @OUT;
+------+
| @OUT |
+------+
|      |
+------+
1 row in set (0,000 sec)

MariaDB [personel]> SELECT * FROM Accounts;
+--------+---------+
| acctID | balance |
+--------+---------+
|    101 |     800 |
|    202 |    2200 |
+--------+---------+
2 rows in set (0,000 sec)

MariaDB [personel]> COMMIT;
Query OK, 0 rows affected (0,000 sec)

15. Ακολουθεί δεύτερη λύση του προβλήματος στο βήμα 15:
// Δημιουργία πίνακα Accounts
DROP TABLE IF EXISTS Accounts;
CREATE TABLE Accounts ( acctID INTEGER NOT NULL PRIMARY KEY,
 balance INTEGER NOT NULL);
INSERT INTO Accounts (acctID, balance) VALUES (101, 1000);
INSERT INTO Accounts (acctID, balance) VALUES (202, 2000);
COMMIT;
SELECT * FROM accounts;
// Δημιουργία trigger Accounts_upd_trg για έλεγχο των updates
delimiter !
CREATE TRIGGER Accounts_upd_trg
BEFORE UPDATE ON Accounts
FOR EACH ROW
BEGIN
IF NEW.balance < 0 THEN
SIGNAL SQLSTATE '23513'
SET MESSAGE_TEXT = 'Negative balance not allowed';
END IF;
END; !
delimiter ;
// Δημιουργία trigger Accounts_ins_trg για έλεγχο των inserts
delimiter !
CREATE TRIGGER Accounts_ins_trg
BEFORE INSERT ON Accounts
FOR EACH ROW
BEGIN
IF NEW.balance < 0 THEN
SIGNAL SQLSTATE '23513'
SET MESSAGE_TEXT = 'Negative balance not allowed';
END IF;
END; !
delimiter ;
